@model ComposableRegex.Models.HomeModel

 <!-- TOP RIGHT RIBBON: START COPYING HERE -->
    <div class="github-fork-ribbon-wrapper right">
        <div class="github-fork-ribbon">
            <a href="https://github.com/devshorts/ComposableRegex">Fork me on GitHub</a>
        </div>
    </div>
    <!-- TOP RIGHT RIBBON: END COPYING HERE -->

@{
    ViewBag.Title = "Composable Regexes";
}

<div class="blogText">
    Visit the <a href="http://onoffswitch.net">blog</a> for full explanation! 
</div>

@using (Html.BeginForm())
{
    <fieldset>
        <legend></legend>
        <div class="input">
            <h4>Composable Regexes</h4>
            
            <div class="unit group">
                <div class="label">
                    @Html.LabelFor(m => m.ComposableRegex)
                </div>
                <div class="content">
                    @Html.TextAreaFor(m => m.ComposableRegex, new { @cols = 80, @rows = 10 ,@id="codeTextArea"})          
                </div>      
            </div>
                
            <div class="unit group">
                <div class="label">
                    @Html.LabelFor(m => m.TargetText)     
                </div>
                <div class="content">
                    @Html.TextAreaFor(m => m.TargetText, new { @cols = 80, @rows = 10 })       
                </div>      
            </div>
             <div class="unit group">
                <div class="label">
                    @Html.LabelFor(m => m.IsMatch)     
                </div>
                <div class="content">
                    @Html.DisplayTextFor(m => m.IsMatch) 
                </div>
            </div>
                
            <div class="unit group">
                <div class="label ">
                    @Html.LabelFor(m => m.TransformedRegex)         
                </div>
                <div class="content transformedRegex">
                    @Html.DisplayFor(m => m.TransformedRegex)  
                    
                    <ul class="trace">
                        @if (Model != null && Model.Trace != null)
                        {
                            foreach (var trace in Model.Trace)
                            {
                                <li>@trace</li>
                            }
                        }
                    </ul>
                </div>
            </div>
               
           
              
                   
        </div>
        
        <div class="example">
            Build out composable regex using the format where the last line is the final regex to use. Comments can be at the start of lines using ## or at the end of lines using ##. <br/><br/>
            <div class="code">
                key = value ## this is a comment<br/>                
                key1 = value1<br/>                
                <br/>                
                <br/>## this is a comment. the final aggregated regex is the last line of the expression. whitespace is stripped
                <br/>
                key|key1
            </div>
            
        </div>
    </fieldset>
    <input type="submit" />
    
    <script>
        var editor = CodeMirror.fromTextArea(document.getElementById("codeTextArea"), {});
    </script>

}